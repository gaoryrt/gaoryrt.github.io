<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog Name Goes Here</title>
    <link>http://gaoryrt.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>digital diary of gaoryrt.</description>
    <pubDate>Mon, 09 Sep 2019 13:20:18 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>买了个多亲 AI 助手</title>
      <link>http://gaoryrt.com/2019/09-09-qin2/</link>
      <guid>http://gaoryrt.com/2019/09-09-qin2/</guid>
      <pubDate>Mon, 09 Sep 2019 12:43:10 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;上个月在小米有品499众筹的，九月一日发货，中间等了有差不多半个月。但是在九月一日之前就出现了很多该手机的开箱视频，别问，问就是恰饭。&lt;/p&gt;
&lt;video src=&quot;/2019/09-09-qin2/open.mp4&quot; controls=&quot;controls&quot;&gt;&lt;/vide
        
      
      </description>
      
      <content:encoded><![CDATA[<p>上个月在小米有品499众筹的，九月一日发货，中间等了有差不多半个月。但是在九月一日之前就出现了很多该手机的开箱视频，别问，问就是恰饭。</p><video src="/2019/09-09-qin2/open.mp4" controls="controls"></video><p>上面这个看不了的话，可以直接看我微博的：<a href="http://t.cn/AiRenuvN?m=4413609721236782&amp;u=2722344300" target="_blank" rel="noopener">http://t.cn/AiRenuvN?m=4413609721236782&amp;u=2722344300</a></p><p>小屏幕的优点：屏占比高、握持感优秀、续航长。这手机内置了遥控器功能，但是貌似把系统自带的其他应用（具体哪一个或者哪几个我也不清楚）禁用了之后就回闪退。遥控空调还是挺让人眼前一亮，但是想想貌似又没什么用。没有前置摄像头，作为备用机，我也完全不需要前置摄像头（吐槽一下招行app，我 s10+ 居然调用后置摄像头来人脸识别，而且用了镜子也识别不上）。后置摄像头只有五百万像素，唯一的功能就是扫码。这手机握持感不如 5c，但是肯定有 se 强，毕竟那么窄。</p><p>小屏幕的缺点嘛，就是屏幕太小了，装了个斗鱼看直播，流畅和蓝光没区别。横屏观看，可视面积就只有火柴盒大小，可能和竖屏观看的大小差不多……手机的installer是被魔改过的，只能装六个第三方应用，貌似是为了让家长放心的买个学子们使用。然而安卓毕竟是安卓，冰箱+安装狮绕过原生的installer进行安装就行了。还有个缺点就是屏幕亮度不怎么受控制，0% 和 50% 一样亮，屏幕素质差，真的差。除开分辨率和贴合厚度讲的差，对比度太低了，跟看风化照片似的。</p><p>这手机折腾的时间还是挺长的，主要来自于接近于原生的 android go 和 22：9 的屏幕。</p><p>综上，499作为备用机堪用，折腾也能玩儿一阵。但是安卓就是安卓，what do you expect?</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2019/09-09-qin2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>南京</title>
      <link>http://gaoryrt.com/2019/03-12-photos/</link>
      <guid>http://gaoryrt.com/2019/03-12-photos/</guid>
      <pubDate>Tue, 12 Mar 2019 14:20:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;上周末趁着双休和紧邻的两个夜晚，和女友一起去了南京。&lt;/p&gt;
&lt;p&gt;这里的人们给我一种爱活的印象，街上的每个人都很自在。&lt;/p&gt;
&lt;p&gt;不大的主城区里新老建筑融合在一起，这种变化时常让我没有准备，就像是城墙后面是大厦组成的天际线，或者是位置意想不到的先锋书店，给人一种赛博朋
        
      
      </description>
      
      <content:encoded><![CDATA[<p>上周末趁着双休和紧邻的两个夜晚，和女友一起去了南京。</p><p>这里的人们给我一种爱活的印象，街上的每个人都很自在。</p><p>不大的主城区里新老建筑融合在一起，这种变化时常让我没有准备，就像是城墙后面是大厦组成的天际线，或者是位置意想不到的先锋书店，给人一种赛博朋克的恍惚感觉。</p><p><img src="./0.JPG" alt=""></p><p><img src="./1.JPG" alt=""></p><p><img src="./2.JPG" alt=""></p><p><img src="./3.JPG" alt=""></p><p><img src="./4.JPG" alt=""></p><p><img src="./5.JPG" alt=""></p><p><img src="./6.JPG" alt=""></p><p><img src="./7.JPG" alt=""></p><p><img src="./8.JPG" alt=""></p><p><img src="./9.JPG" alt=""></p><p><img src="./a.JPG" alt=""></p><p><img src="./b.JPG" alt=""></p><p><img src="./c.JPG" alt=""></p><p>很长一段时间不写东西了，原因是这段时间很多想法一闪而过没有用心去捕捉，再者正如上次说到过的，我怕和其他人一样定位在主流的对立面，不敢再输出价值观了。所以从那时候开始，博客更多的还是记录思维和生活。</p><p>想到再写，peace。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2019/03-12-photos/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Bad HUD Rapes</title>
      <link>http://gaoryrt.com/2018/08-25-fixedRaping/</link>
      <guid>http://gaoryrt.com/2018/08-25-fixedRaping/</guid>
      <pubDate>Sat, 25 Aug 2018 13:17:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;HUD&quot;&gt;&lt;a href=&quot;#HUD&quot; class=&quot;headerlink&quot; title=&quot;HUD&quot;&gt;&lt;/a&gt;HUD&lt;/h1&gt;&lt;p&gt;平视显示器 HUD (head-up display) 是一种飞行辅助仪器，安装在驾驶员前方，这样驾驶员不用低头看各种仪表，能在平视
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="HUD"><a href="#HUD" class="headerlink" title="HUD"></a>HUD</h1><p>平视显示器 HUD (head-up display) 是一种飞行辅助仪器，安装在驾驶员前方，这样驾驶员不用低头看各种仪表，能在平视时看见各种关键信息。</p><p><img src="/2018/08-25-fixedRaping/Hud_on_the_cat.jpg" alt="HUD"></p><p>后来 HUD 出现在汽车驾驶辅助和游戏中，用于驾驶者和玩家悉知各种关键信息。</p><p><img src="/2018/08-25-fixedRaping/Supertuxkart-0.8.1-screenshot-6.png" alt="HUD"></p><p>但是和飞机汽车驾驶员拥有全视角不同，游戏对玩家的反馈绝大部分都是通过显示器完成的。除了面前的显示器和游戏声音之外，基本就没什么渠道可以获取游戏信息了，可能这也是 NDS 副屏和可震动游戏手柄让人喜欢的原因之一吧。</p><p><img src="/2018/08-25-fixedRaping/582px-Nintendo-DSi-Bl-Open.png" alt="NDS"></p><h1 id="减少元素"><a href="#减少元素" class="headerlink" title="减少元素"></a>减少元素</h1><p>游戏设计者会谨慎的筛选常驻于 HUD 的信息：对于 FPS 游戏来说，玩家的血量、剩余子弹数量、小地图、游戏进程等；对于 RPG 来说，HUD 一般会展示玩家的血量、魔法值、技能等等。过多的常驻内容会影响玩家的体验，在很多大型游戏中都能看到关闭 HUD 的选项，使玩家拥有沉浸式的体验。</p><p>而对于非第一要素的内容，例如游戏敌人的血量，通常会放在敌人形象的上方；菜单栏一般会通过点击 esc 来打开；对于某些游戏，HUD 的使用会更少：例如一辆会撞坏的汽车，它的血量不会显示在 HUD 中，而是通过引擎盖冒烟、着火来显示；例如受伤的角色会有伤口，流血。</p><p>为什么不把 NPC 的魔法值或者是他的技能常驻在窗口内呢？</p><h1 id="SNR"><a href="#SNR" class="headerlink" title="SNR"></a>SNR</h1><p>展示垃圾 HUD 和智能音箱投放阈下知觉广告这一行为类似，可能在听觉上这一行为更加可耻，毕竟我们可以不看某些内容，但是很难做到不听某些内容。</p><p>移动端网页中的 <code>position: fixed</code> 的内容是新一代的 HUD。在可视范围越来越小的时候，我们选取放在 HUD 里的内容时也应越发谨慎才对。</p><p>为了展示优先级高的内容，我们可以花点时间考虑一下什么内容能够常驻展示，真的。例如当大多数人都知道网页内从左向右滑动是返回上一级页面的话，那就用不着在有了导航栏之后，还专门为前进/返回按钮单独开辟一个 tab 了。是的，我说的就是微信。不知道在 iPhone4 上使用微信自带浏览器还能不能看见网页内容。</p><p><img src="/2018/08-25-fixedRaping/20180825223327.png" alt=""></p><p>上面这张图有些不妥，左图的垃圾用户体验是微信和百度合力造成的。双导航栏、双菜单 icon、双返回 icon、两个 tab 栏，真是绝了。</p><p>微信自带浏览器和地方电视台拙劣的常驻广告都强奸了使用者的双眼，说不定还强奸了脑子。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>貌似批评微信已经成为我的日常，但是依然离不开啊，可能只能靠那天转发敏感内容来永久封禁了。<br>还有最后这张图是真的，绝了。<br>想到再写，祝好~</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2018/08-25-fixedRaping/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Let It Be</title>
      <link>http://gaoryrt.com/2018/04-15-711/</link>
      <guid>http://gaoryrt.com/2018/04-15-711/</guid>
      <pubDate>Sun, 15 Apr 2018 13:26:26 GMT</pubDate>
      <description>
      
        
        
          &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GOF9E2WirfE?rel=0&amp;amp;showinfo=0&amp;amp;start=6&quot; frameborder=&quot;0&quot; allow=&quot;aut
        
      
      </description>
      
      <content:encoded><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/GOF9E2WirfE?rel=0&amp;showinfo=0&amp;start=6" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>前两天在推荐下，看了<a href="https://search.bilibili.com/all?keyword=%E8%B7%9F%E4%BD%A0%E5%8E%BB%E4%BD%A0%E5%AE%B6%E5%8F%AF%E4%BB%A5%E5%90%97" target="_blank" rel="noopener">搬运版本的东京电视台节目《跟着去你家可以吗》</a>。每集都会在晚上随机询问路人，能否用帮忙付打车费/酒费的条件，换取去他家里访问的机会。每集节目都是个短短的纪录片，类似《72小时纪实》，讲的就是每个人真实又平凡的生活日常。</p><p>我很喜欢这种（伪）纪实平凡的作品，不自觉地连着看了三集《去你家》，仿佛找到了《活着》、《步履不停》、《深夜食堂》、《小森林》的温暖感觉。每每看完都给我生活的勇气。</p><p>至今脑海中仍有着清晰记忆：高中时候，由于不想做作业于是提早去学校抄别人的，天还没亮就出门。巷子不长，左右穿插的路灯，路灯后面老式小区。我当时就看着顶楼的某扇窗，想象那一户的生活又是怎样的。世上有太多不同的人，活了太多种不同的人生。</p><p>下班乘地铁，电梯上表情严肃的陌路人，回家后都是脆弱又坚强，绝望又不甘心的个体吧？</p><hr><p>这种走到普通人身边观察的作品，一不小心就会变得做作和无病呻吟：观察不够全面，只是走到别人身边去，而去干些别人看不懂的事情；或是部分诚实，把事实筛选后展示给观众。带有观察者强烈的主观意见，这就让人很反感了。我并不期待在看完作品后能理解、能包容，但现如今就连「看完后不要加深偏见」都很难做到。产出者知道作品有影响力，却不知道自己的作品在道德上应不应当影响观者。</p><p>今早看到微博上<a href="https://weibo.com/1710406277/Gc22iCGre?type=comment" target="_blank" rel="noopener">滴滴文嵩在解释滴滴派单问题</a>，一些评论尝试用个例和偏见来证伪，他也一一回复，看得我很是揪心。先不论哪个算法更厉害，他尝试给这群人说理这件事就错了，尤其是微博上不懂程序的围棋爱好者们，以及对滴滴收费不满意的车主和用户。</p><p>有一群别有用心的作者，和一群不讲道理的观者，我实在是对国产作品提不起兴趣。</p><p>就看了三集「去你家」，每一集到了最后，背景乐都是披头士的《let it be》，最后放一个翻唱的《Yesterday》:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/h9Bvw1hDAuo?rel=0&amp;controls=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>并祝各位读者好～</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2018/04-15-711/#disqus_thread</comments>
    </item>
    
    <item>
      <title>主动与反抗</title>
      <link>http://gaoryrt.com/2017/11-30-171130/</link>
      <guid>http://gaoryrt.com/2017/11-30-171130/</guid>
      <pubDate>Thu, 30 Nov 2017 15:48:54 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;我觉得写东西或者看东西，有趣的地方不是你的道理有多惊艳，多深刻，多标新立异。是你对于某件事情，能看到别人看不到的角度。原来这件事情还能这样看待，原来还能有这样的解法，啊，原来你会这样想。我觉得这个是写东西和阅读有意思的地方。但现在普遍都是陈词滥调，
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>我觉得写东西或者看东西，有趣的地方不是你的道理有多惊艳，多深刻，多标新立异。是你对于某件事情，能看到别人看不到的角度。原来这件事情还能这样看待，原来还能有这样的解法，啊，原来你会这样想。我觉得这个是写东西和阅读有意思的地方。但现在普遍都是陈词滥调，不是道理陈旧，是思维陈旧。还不停表达，跟我妈念经一样。</p></blockquote><p>以上摘选自 <a href="http://music.163.com/#/program?id=1366476523" target="_blank" rel="noopener">第四期 The Jungle</a> 听众反馈。</p><hr><p>我发现身边的不少人都容易陷入一种「就是要和你对着干」的思维当中，他们可以在第一时间直觉地想到非主流的另类观点。很多自媒体的写手都具有这种能力：当某件事被爆出来，他们可以嗅到舆论的走向并反其道而行之，发表一篇怼所有人的文章，然后游走在风口浪尖。当他们刻意发表自己对事件的看法的时候，就可以轻易的让其他人惊讶「原来还有这种角度」。这种反抗是刻意的与主流做对，但是大众观感良好。我不太喜欢这种行为，因为他们高估了自己为少数派，高估了这种能力的稀有性，并且刻意滥用以达到哗众取宠的效果。</p><p>当一个非主流的观点在脑中产生的时候，他们很难区分主动与不服从的区别、很难说这是不是直觉。输入到输出的间隔实在是太短了，根本没有回顾的时间：是输入参杂了主流的观点导致我这样想，还是我天生就这样。我们怎样区分做作和天才？</p><p>无论是主动还是反抗，谦逊告诉我们需要保持自己的独立，并尊重他人的观点。在现在这个价值观的后稀缺时代，我看到很多人都太想表达自己的见解了，他们宁愿相信自己是天生的小众，把自己定位在主流的对立面，却输出着主流的观点。这不是小众，真正的小众在洪流之中能够坚持独立的思考。</p><hr><p>这篇文章在某种意义上来说是一个自嘲。再也不敢说自己在输出了，我只是记录思维，在记录生活而已。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/11-30-171130/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linxes Ⅰ</title>
      <link>http://gaoryrt.com/2017/11-05-linxes/</link>
      <guid>http://gaoryrt.com/2017/11-05-linxes/</guid>
      <pubDate>Sun, 05 Nov 2017 08:26:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这是一篇实验性的文章，想看的人看，不想看的就别看。&lt;/p&gt;
&lt;p&gt;本类型的文章将会模仿 &lt;a href=&quot;https://en.wikipedia.org/wiki/Newsletter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;newsletter&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>这是一篇实验性的文章，想看的人看，不想看的就别看。</p><p>本类型的文章将会模仿 <a href="https://en.wikipedia.org/wiki/Newsletter" target="_blank" rel="noopener">newsletter</a>，以简介的加链接方式分享一些浪漫的东西。更新时间暂定为一周。</p><hr><h2 id="📺-说唱押韵的历史"><a href="#📺-说唱押韵的历史" class="headerlink" title="📺 说唱押韵的历史"></a>📺 说唱押韵的历史</h2><p><a href="https://www.youtube.com/channel/UCLXo7UDZvByw2ixzpQCufnA" target="_blank" rel="noopener">Vox</a>的视频。从介绍 Beats 和 Bar 开始，分析了一系列特色的押韵方式：<br>AABB 的结尾单押、单句里的内部押韵、Bar 切分单词、各种类型的多韵脚，还讲到了 Kendrick 和 命运交响曲的共同点。补充一些关于 Rap 的知识，至少作为茶座上的谈资。</p><p><a href="https://www.youtube.com/watch?v=QWveXdj6oZU" target="_blank" rel="noopener">Rapping, deconstructed: The best rhymers of all time</a></p><hr><h2 id="📺-优化视频的五个建议"><a href="#📺-优化视频的五个建议" class="headerlink" title="📺 优化视频的五个建议"></a>📺 优化视频的五个建议</h2><p>两个年轻人关于视频优化的建议。<a href="https://www.youtube.com/channel/UCABwqCK6XMowQDwlIz00UFw" target="_blank" rel="noopener">Brandon Havard</a> 作为一个科技视频主播，风格和我喜欢的 <a href="https://www.youtube.com/channel/UCBJycsmduvYEL83R_U4JriQ" target="_blank" rel="noopener">Marques Brownlee AKA. MKBHD</a> 很相似。个人喜好来讲，前者<a href="https://www.youtube.com/watch?v=h1Gx1x9sMdM" target="_blank" rel="noopener">近期</a>的视频风格更有超过<a href="https://www.youtube.com/watch?v=ld5H2L4j6LE" target="_blank" rel="noopener">后者</a>的趋势。注意，这里讲的是视频风格。</p><p><a href="https://www.youtube.com/watch?v=AIMEmc_SCPM" target="_blank" rel="noopener">Make Your Videos Better</a></p><hr><h2 id="📃-Google-硬件正在复兴包豪斯设计"><a href="#📃-Google-硬件正在复兴包豪斯设计" class="headerlink" title="📃 Google 硬件正在复兴包豪斯设计"></a>📃 Google 硬件正在复兴包豪斯设计</h2><p>从一代 Google Pixel 和 Daydream View VR Headsets 开始，谷歌的硬件正在复兴包豪斯设计（<a href="https://en.wikipedia.org/wiki/Bauhaus" target="_blank" rel="noopener">包豪斯是源自德国</a>）。文章由今天的谷歌硬件产品追溯到了四十年前意大利工业产品，发现了二者间的奇妙的关联。对其中 UX 的部分不感兴趣也没关系，至少图片看起来很美。</p><p><a href="https://blog.prototypr.io/google-and-the-resurgence-of-italian-design-e9234cf3d073" target="_blank" rel="noopener">Google and the Resurgence of Italian Design</a></p><hr><h2 id="📕-关于函数式思想"><a href="#📕-关于函数式思想" class="headerlink" title="📕 关于函数式思想"></a>📕 关于函数式思想</h2><p>一本小书，第一眼还以为是儿童书籍，用问答的方式由浅入深的介绍了函数式编程思想。深入浅出，阅读过程中频频引人深思。引用一个书评：</p><blockquote><p>上学最宝贵的收获之一是结交学识过人的朋友。自己闷头学得山穷水尽时，高手轻轻一句点拨，眼前便峰回路转，柳暗花明。每次上完课，有幸和朋友小聚，请教弱智问题，听朋友妙语解惑，实在是难得的人生乐事。</p></blockquote><p>（豆瓣）<a href="https://book.douban.com/subject/27080946/" target="_blank" rel="noopener">The Little Schemer</a></p><hr><h2 id="📺-鸡汤"><a href="#📺-鸡汤" class="headerlink" title="📺 鸡汤"></a>📺 鸡汤</h2><p>可能大家都看过 <a href="https://www.youtube.com/user/caseyneistat/videos" target="_blank" rel="noopener">Casey Neistat</a> 的<a href="https://www.youtube.com/watch?v=84WIaK3bl_s" target="_blank" rel="noopener">两万刀航班</a>视频。这个励志的也是来自他。</p><p><a href="https://www.youtube.com/watch?v=jG7dSXcfVqE" target="_blank" rel="noopener">DO WHAT YOU CAN’T</a></p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/11-05-linxes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>尽量不用微信吧</title>
      <link>http://gaoryrt.com/2017/10-12-anti-wechat/</link>
      <guid>http://gaoryrt.com/2017/10-12-anti-wechat/</guid>
      <pubDate>Thu, 12 Oct 2017 11:57:50 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;本文带有作者价值观输出，请谨慎阅读。&lt;/p&gt;
&lt;h2 id=&quot;一是使用者完全没有隐私可言&quot;&gt;&lt;a href=&quot;#一是使用者完全没有隐私可言&quot; class=&quot;headerlink&quot; title=&quot;一是使用者完全没有隐私可言&quot;&gt;&lt;/a&gt;一是使用者完全没有隐私可言&lt;/h2&gt;&lt;p&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>本文带有作者价值观输出，请谨慎阅读。</p><h2 id="一是使用者完全没有隐私可言"><a href="#一是使用者完全没有隐私可言" class="headerlink" title="一是使用者完全没有隐私可言"></a>一是使用者完全没有隐私可言</h2><p>可能谈到微信是否隐私，大家最先想到的是个人聊天记录是否会被身边的人看到。这里所提到的并不是由使用者主动保护获得的隐私、或者是由操作系统保护获得的隐私，这些都和微信无关。</p><p>我想谈的是，作为一款大型的即时聊天软件，从保护用户的意志出发，所作出的努力。令人悲伤的是，我完全感受不到微信为我提供了什么保护措施能让我自由的与他人进行私密的在线交流。</p><p><a href="https://blog.yitianshijie.net/2017/07/19/im-apps-security-check-v1point2/" target="_blank" rel="noopener">微信没有端到端加密的选项</a>，iMessage 有、Wire 有、WhatsApp 有、Telegram 有、Line 有、Messenger 也有。</p><p>如果有一个恶意的微信工程师想查看你的聊天内容，他是完全有能力这样做的，而你对此一无所知。这也为网络审查提供了方便。</p><h2 id="Nothing-is-binary"><a href="#Nothing-is-binary" class="headerlink" title="Nothing is binary"></a>Nothing is binary</h2><p>我认为网络审查是有必要的，在任何一个有用户产出的地方都需要有网络审查和舆论引导。其中十分重要的是在给予<strong>用户自由发声的权利</strong>和<strong>在事情恶化之前控制住</strong>之间需要精确拿捏，这是对审查者的考验。</p><p>在如今舆论导向无处不在的大环境下，我们有必要学会做价值观的游击队员。不仅要辨别、躲避，更要吸取经验、挪为己用。我更想得到的是自己对于事件的观点，而不是任何人的结论或者看法。如果把获得经验作为最终目的的话，我认为自己总结事件很有帮助，而从别人的转述、报告、新闻稿中得到的经验就含杂了别人的观点。在事件中，他人的观点是真相的噪声。显然，苹果日报和南方周末的噪声都不小。</p><p>不顽固的用户会被他人有意识或无意识的价值观引导，无意识输出价值观的还好，可惜的是很多价值观输出都带有明显的利己意图，吃相难看。这也筛选出了更容易受引导的人成为忠实用户。那么容易受到引导的又是哪些人呢？</p><p>但是微信却不愿意给所有价值观输出者平等输出的机会，也不给所有接收者一个平等接收的机会，这相当的暴力。我不能在微信公众号文章内自由的添加外链，外链的形式是由微信自己定义的，文章内只能打开腾讯系的外链。我不能在文章里自由的添加音乐内容，我只能在它指定的曲库（QQ 音乐）中进行选择。我不能在文章中自由添加视频内容，只能在它指定的视频网站（腾讯视频）中指定。我不能通过系统级的通用链接跳转到它指定以外的其他应用。当然还有小程序，让微信变成了某种意义上的操作系统。要记住，互联网精神是开放和去中心化，是这些促使互联网成为了互联网。</p><p>在这个软件里变成了：我不能说我想说的，我也不能看我不想看的（此处断章取义）。</p><h2 id="🃏"><a href="#🃏" class="headerlink" title="🃏"></a>🃏</h2><p>我想不能离开微信的唯一原因就是大家都在用它。可能大家都隐约感受到这个软件的恶意，却又因为同样的原因不能离开：我的朋友、我的亲人、我的同事都离不开它。再看看<a href="http://weixin.qq.com/" target="_blank" rel="noopener">微信官网</a>自己的介绍：</p><blockquote><p>微信，是一个生活方式<br>超过九亿人使用的手机应用</p></blockquote><p>的确是在嘲讽我们这群这些离不开的用户了。</p><p>就在狗仔横行的时候我们觉得明星真是惨，一点隐私都没有，但是少有人能想到我们自己也没有隐私可言。</p><hr><p>本篇结尾就再来一遍：</p><p>想看的人看，不想看的就别看。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/10-12-anti-wechat/#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于数据埋点</title>
      <link>http://gaoryrt.com/2017/08-29-event-tracking/</link>
      <guid>http://gaoryrt.com/2017/08-29-event-tracking/</guid>
      <pubDate>Tue, 29 Aug 2017 14:31:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;项目中需要埋点的地方越来越多，急需一套通用的埋点解决方案。之前基于后端 + api 的 PV／UV 统计方式不够精细、操作复杂，对于前端会入
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>项目中需要埋点的地方越来越多，急需一套通用的埋点解决方案。之前基于后端 + api 的 PV／UV 统计方式不够精细、操作复杂，对于前端会入侵逻辑，后端在接收信息和事后统计时也不好处理逻辑。</p><p>结合<a href="https://help.growingio.com/Features/overview.html" target="_blank" rel="noopener">GrowingIO的展示信息</a>大概想了一下，需要采集的信息不过就是：</p><ol><li>打开的链接与打开的时间</li><li>用户个人信息（这个基本上都需要后端来做）</li><li>（需要统计的）元素展示时间与时长</li><li>（需要统计的）元素点击时间</li><li>关闭或跳转时间（和目标）</li></ol><p>需求自然而然就出来了：</p><ol><li>高效埋点</li><li>数据格式化，便于处理</li><li>精细埋点</li><li>兼容各种框架</li></ol><h2 id="所以选用什么方式呢"><a href="#所以选用什么方式呢" class="headerlink" title="所以选用什么方式呢"></a>所以选用什么方式呢</h2><p><a href="https://zhuanlan.zhihu.com/p/27659302" target="_blank" rel="noopener">百度外卖前端有篇</a>写得犹抱琵琶半遮面的文章就讲了一下他们的方案。写的挺详细的，就是没有开源。</p><p>里面讲了当今常用的几种埋点方式：</p><ol><li>命令式，大概就是我们这边的原始埋点方式</li><li>声明式，就是在 DOM 上声明需要采集的元素数据以及相关操作</li></ol><p>然后埋点行为就三个：</p><ol><li>ready 绑定就算</li><li>click 点击就算</li><li>show 统计时长</li></ol><p>声明式在现在动态操作 DOM 较多的现代框架中好像还不怎么好做，什么时候绑定呢，什么时候解绑呢，会不会重复绑定呢，展示时长怎么做呢？</p><p>首先想到的思路是监听、劫持全局的点击事件和滚动事件，然后如果检测到相关元素就绑定+采集，关闭或跳转前统一上传。然后上面的链接里面提供了一个更优雅的方式，<code>MutationObserver</code> + pollyfill，把用在自定义指令上的绑定更新解绑都放在普通元素上来了。所以可以结合两者，只用 <code>new</code> 一次就完成了埋点。</p><p>上面文章里写的方式直接结合了 vue 的自定义指令，绑定、更新、解绑一个不落，我想要的是在一个 json 里面声明需要采集的元素选择器名、至多到什么 <code>before</code>、<code>after</code>、<code>once</code>、<code>creatCounter</code>、<code>creatTimer</code> 就完了，大概这样：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">new EventTrack([</span><br><span class="line">    &#123;</span><br><span class="line">        node: '.buyButton',</span><br><span class="line">        before: beforeClick('click'),</span><br><span class="line">        after: afterClick('click')</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        node: '#banner7',</span><br><span class="line">        once: OnceShow('show'),</span><br><span class="line">        creatCounter,</span><br><span class="line">        creatTimer</span><br><span class="line">    &#125;</span><br><span class="line">], '/api/eventUpload')</span><br></pre></td></tr></table></figure></p><p>支持自定义函数（<code>beforeClick</code> 和 <code>afterClick</code>），以及多次绑定。</p><p>后端应该就是一个通用接口加一个通用数据库用户存放所有操作日志。希望这么些东西是有用的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Qquanwei/trackpoint-tools" target="_blank" rel="noopener">trackpoint-tools</a>，针对组建化的 react 写的函数式埋点方案，我这个弱鸡看得很费劲，但是很有参考价值。</p><p><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">lodash</a>，什么 <code>before</code>、<code>after</code>、<code>once</code> 都是 lodash 里面来的，lodash 注释写的是真的好啊。</p><p><a href="https://github.com/vissense/vissense" target="_blank" rel="noopener">VisSense</a>，一个可视元素触发事件的库，展示时长就靠它了。</p><hr><p>以下内容更新于一天后（8-30）</p><h2 id="遇见的坑"><a href="#遇见的坑" class="headerlink" title="遇见的坑"></a>遇见的坑</h2><p>我还是代码的阅读量太少了，基本上是不知道别人怎么进行埋点的，在写这个东西的时候就一直在问自己是不是别人写的时候都会直接在 DOM 上进行声明式埋点。虽然东西是差不多写出来了，但是需求却一直在变化，这在某一个方面上也说明了设计之初的不合理和不宽容。</p><p>阅读量不够的另一个体现在于代码不够优雅，比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">    clients.forEach(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> clientRecord = database.lookup(client)</span><br><span class="line">        <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">            email(client)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种遍历数组的比较，其实可以变成：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">emailClients</span>(clients) &#123;</span><br><span class="line">    clients</span><br><span class="line">        .filter(<span class="keyword">is</span>ActiveClient)</span><br><span class="line">        .forEach(email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">isActiveClient</span>(client) &#123;</span><br><span class="line">    const clientRecord = database.lookup(client)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">clientRecord.isActive()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比如默认变量的使用：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> breweryName = name || <span class="string">'default name'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变成：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">(breweryName = <span class="string">'default name'</span>)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>看着都令人赏心悦目。</p><p>具体又一个逻辑的问题没有考虑清楚：解绑的时候如何入侵呢？ MutationObserver 是相当好用的，能够相对异步的提供事件勾子，但是如果一个元素已经在 DOM 树中被删除了，那么监听事件的解绑又如何谈起呢？再进一步问，如果一个元素在 DOM 树中被删除了，如果再一次被添加进去，那之前绑定的监听事件还存在么？是不是要采用提前劫持事件的方式？</p><p>设计上还有很多不足的地方，比如自定义函数的传入方式、比如有没有必要将统一上传的功能集成在一起，如果不集成在一起，那么 log 是不是又要换一种方式返回出来，返回的格式又能不能自定义呢？</p><p>另外，有没有 document.querySelector() 的逆函数呢？传入一个 DOMObject，返回它的选择器字符串？</p><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><p>上面提到的 document.querySelector() 的逆函数：<a href="https://github.com/ericclemmons/unique-selector" target="_blank" rel="noopener">unique-selector</a>。</p><p>如果只想监听出现和消失事件，可以用 <a href="https://github.com/jeremenichelli/hunt" target="_blank" rel="noopener">huntjs</a>。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/08-29-event-tracking/#disqus_thread</comments>
    </item>
    
    <item>
      <title>「翻译」使用 ES2017 Async 函数</title>
      <link>http://gaoryrt.com/2017/08-17-Using-ES2017-Async-Functions/</link>
      <guid>http://gaoryrt.com/2017/08-17-Using-ES2017-Async-Functions/</guid>
      <pubDate>Thu, 17 Aug 2017 15:13:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;翻译自&lt;a href=&quot;https://css-tricks.com/using-es2017-async-functions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using ES2017 Async Functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>翻译自<a href="https://css-tricks.com/using-es2017-async-functions/" target="_blank" rel="noopener">Using ES2017 Async Functions</a></p><p><a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md" target="_blank" rel="noopener">ES2017 在六月最终敲定了</a>，随之而来的是对我最喜欢的 <code>async</code> 函数的广泛支持。如果你也曾为异步 Javascript 而头疼，那么这就是解药。如果你没有的话，额，你有可能是个天才。</p><p>使用 <code>async</code> 让你或多或少以顺序的方式编写 JS 代码，而不用把逻辑放在回调、生成器、promises 里。</p><p>考虑有如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = fetch(<span class="string">'http://sampleapi.com/posts'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger()</span><br></pre></td></tr></table></figure><p>如果你写过 JS 的话，你应该知道上面的代码为啥不会如愿运行。</p><p>但是下面的代码会如愿运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> fetch(<span class="string">'http:sampleapi.com/posts'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger()</span><br></pre></td></tr></table></figure><p>只用添加两个关键词，代码简洁直观，也能正常运行。</p><h1 id="在-ES6-之前的异步-JS"><a href="#在-ES6-之前的异步-JS" class="headerlink" title="在 ES6 之前的异步 JS"></a>在 ES6 之前的异步 JS</h1><p>在讲 <code>asybc</code> 和 <code>await</code> 之前，有必要先了解一下 promises。要弄懂 promises，还要再往前讲讲老式的回调。</p><p>ES6 里添加了 Promises，这让我们编写异步的 JS 有了飞跃。不再有所谓的 “回调地狱”。</p><p>我们可以为一个主函数传入一个可以在任意时候作为返回值调用的回调函数。这也是 JS 的基础。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params"><span class="string">'file.txt'</span>, (data</span>) =&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 在回调内</span></span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数会从一个文件记录数据，这也只能在文件完全被读完之后进行。看起来很简单，但是如果你想按顺序读取并记录五个不同的文件怎么办呢？</p><p>在 Promises 出现之前，为了执行顺序你需要嵌套回调，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下为标准的回调地狱</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineFiles</span>(<span class="params">file1, file2, file3, printFileCallBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newFileText = <span class="string">''</span></span><br><span class="line">    readFile(string1, (text) =&gt; &#123;</span><br><span class="line">        newFileText += text</span><br><span class="line">        readFile(string2, (text) =&gt; &#123;</span><br><span class="line">            newFileText += text</span><br><span class="line">            readFile(string3, (text) =&gt; &#123;</span><br><span class="line">                newFileText += text</span><br><span class="line">                printFileCallBack(newFileText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码难以理解，这还是没有包括错误处理（比如其中一个文件不存在）的代码。</p><h1 id="我保证这会变好（你懂了？！）"><a href="#我保证这会变好（你懂了？！）" class="headerlink" title="我保证这会变好（你懂了？！）"></a>我保证这会变好（你懂了？！）</h1><p>*译者注：这里作者用了 Promise 的双关，既是‘保证’意，又是 Promise 关键字意。</p><p>这时 <code>Promise</code> 就派上用场了。Promise 是一种提前知晓暂未出现数据的方式。<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="noopener">You Don’t Know JS 系列</a>的作者 Kyle Simpson 是知名的异步 JS 布道者。<a href="https://www.youtube.com/watch?v=Qg1SvpIau6U" target="_blank" rel="noopener">他对 Promise 的解释是</a>：就像在快餐店点餐。</p><ol><li>点餐。</li><li>付钱并取得餐号小票。</li><li>等餐。</li><li>当餐准备好了，他们会叫你的号。</li><li>取餐。</li></ol><p>正如他指出的，当你在等餐的时候不可能吃你的菜，但是你可以盼它，你可以为你的餐做好准备。当你等餐的时候你可以继续你的人生，即使现在没有拿到菜，因为食物已经被“允诺”给你了。这就是 Promise。一个用于表示终将出现数据的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">readFile(file1)</span><br><span class="line">  .then(<span class="function">(<span class="params">file1-data</span>) =&gt;</span> &#123; <span class="comment">/* do something */</span> &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">previous-promise-data</span>) =&gt;</span> &#123; <span class="comment">/* do the next thing */</span> &#125;)</span><br><span class="line">  .catch( <span class="comment">/* handle errors */</span> )</span><br></pre></td></tr></table></figure><p>这是 <code>Promise</code> 的语法。就主要好在可以用直观的方式链接顺序事件。上面的例子看上去还不错，但是我们还是在使用回调函数。Promise 只是把回调简单包装了一下，让它更直观了。</p><h1 id="最好（且最新）的方式：-Async-／-Await"><a href="#最好（且最新）的方式：-Async-／-Await" class="headerlink" title="最好（且最新）的方式： Async ／ Await"></a>最好（且最新）的方式： Async ／ Await</h1><p>几年前，async 函数被纳入了 JavaScript 生态系统。截止上个月已作为一种官方语法得到了广泛的支持。</p><p><code>async</code> 和 <code>await</code> 关键字基于 pormise 和 generator 做了简单的封装。本质上，它允许我们在所需的任意位置使用 <code>await</code> 关键字“暂停”一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取到值之前都会暂停</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> fetch(<span class="string">'http://sampleapi.com/posts'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码能按照你想象的运行。它记录来自 API 调用的数据。如果这都看不懂我也不知道咋办了。</p><p>这样做的好处就是直观。 你以大脑思考的方式编写代码，然后告诉代码在所需的位置暂停。</p><p>另一个好处就是可以使用 promise 不能使用的 <code>try</code> 和 <code>catch</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> user_id = <span class="keyword">await</span> fetch(<span class="string">'/api/users/username'</span>)</span><br><span class="line">        <span class="keyword">let</span> posts = <span class="keyword">await</span> fetch(<span class="string">'/api/`$&#123;user_id&#125;`'</span>)</span><br><span class="line">        <span class="keyword">let</span> object = <span class="built_in">JSON</span>.parse(user.posts.toString())</span><br><span class="line">        <span class="built_in">console</span>.log(posts)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, error) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个故意构造的例子，但至少证明了一点： <code>catch</code> 可以捕获在该过程中发生的任意错误。至少有三个位置 <code>try</code> 可能出错，这也是迄今为止处理一部代码最简洁的方式。</p><p>我们也可以使用 async 函数让循环和判断不再令人头疼：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="built_in">console</span>.log(counter)</span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个愚蠢的例子，但至少会按照预期运行并且容易阅读。 如果您在控制台中运行此操作，你会看到代码在调用 sleep 的时候暂停，下一个循环也不会等一秒钟再启动。</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>现在你领略了 <code>async</code> 和 <code>await</code> 的美，让我们深入了解它的细节：</p><ul><li><code>async</code> 和 <code>await</code> 基于 <code>promise</code>。 使用 <code>async</code> 的函数将始终返回一个 promise 对象。 这一点很重要，你有可能会陷入一种“我懂了”的假象。</li><li>在使用 <code>await</code> 的时候我们暂停了函数，而非整段代码。</li><li><code>async</code> 和 <code>await</code> 是非阻塞的。</li><li><p>你仍然可以使用 <code>Promise</code> 例如 <code>Promise.all()</code>，这是我们之前的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logPosts</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> user_id = <span class="keyword">await</span> fetch(<span class="string">'/api/users/username'</span>)</span><br><span class="line">        <span class="keyword">let</span> post_ids = <span class="keyword">await</span> fetch(<span class="string">'/api/posts/&lt;code&gt;$&#123;user_id&#125;'</span>)</span><br><span class="line">        <span class="keyword">let</span> promises = post_ids.map(<span class="function"><span class="params">post_id</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  fetch(<span class="string">'/api/posts/$&#123;post_id&#125;'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> posts = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">        <span class="built_in">console</span>.log(posts)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, error) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>await</code> 只能在已被声明为 <code>async</code> 的函数内使用。</p></li><li>所以不能在全局使用 <code>await</code>。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> callBack)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对了!</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> callBack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="现在就可以用啦"><a href="#现在就可以用啦" class="headerlink" title="现在就可以用啦"></a>现在就可以用啦</h1><p>截至2017年6月，几乎所有浏览器都可以使用 <code>async</code> 和 <code>await</code> 关键字。更好的是，为了确保您的代码在任何地方都可以工作，请使用 Babel 将 JS 预处理为旧版本支持的语法。</p><p>如果您对 ES2017 的更多内容感兴趣，可以<a href="http://2ality.com/2016/02/ecmascript-2017.html" target="_blank" rel="noopener">在这里查看完整的 ES2017 功能列表</a>。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/08-17-Using-ES2017-Async-Functions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>完全配合</title>
      <link>http://gaoryrt.com/2017/08-09-fully-cooperate/</link>
      <guid>http://gaoryrt.com/2017/08-09-fully-cooperate/</guid>
      <pubDate>Wed, 09 Aug 2017 14:56:41 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;语言处理器会事无巨细地做错误检查并指出。这和人打交道不同，只要你方便，它总是有足够的时间和耐心陪你一起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我感觉我对人更没有耐心，或许是因为机器不会对我的情绪化表现作出反应，在与人社交时我会很容易地展现出自
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>语言处理器会事无巨细地做错误检查并指出。这和人打交道不同，只要你方便，它总是有足够的时间和耐心陪你一起。</p></blockquote><p>我感觉我对人更没有耐心，或许是因为机器不会对我的情绪化表现作出反应，在与人社交时我会很容易地展现出自己的不耐烦，对亲密的人尤甚。<br>与调试不同，社交并不会为你作任何保证。社交中的几乎所有结果都不是某一方决定的，对一个对待风险更加保守的人来说，交友不如赌老虎机。毕竟老虎机对于所有人都是随机的。<br>你只用拉下摇杆等着 777，老虎机不会让你更失望的，没有哪种老虎机会吃掉你尚未投进去的代币。  </p><p>这可能就是为什么我有时候更乐于做一个 API，在社交中完全配合。你告诉我时间和地点，我给你我所知的天气预报。<br>这样的话，至少不会让对方出乎意料地失望。做到完全配合又是多么简单的一件事情，我不用考虑你说了什么、有什么寓意、有什么期望、有什么不满，我只管去做；你不能责怪我做错了什么，因为并不是我给不了你完美的结果，而是你当初提出了错误的要求。</p><p>要是人人都像这样，太空时代会不会来的更早一点？</p><p>但是这样看来完全配合又是极不负责、极没有耐心的。看似在配合的过程中不对输入做任何评价，然而这种「我不服，走着瞧，等打脸」的方式却相当的低效且暴力。完全配合放弃了与人沟通的优势，又显得有些无力了。</p><p>所以到头来其实并不是机器对我有耐心所以我更喜欢与机器打交道，而是我没有足够的耐心与人打交道不愿意社交，而已。</p><p>就是这样～</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/08-09-fully-cooperate/#disqus_thread</comments>
    </item>
    
    <item>
      <title>将自己的工作偷偷自动化道德么？</title>
      <link>http://gaoryrt.com/2017/07-09-automatic/</link>
      <guid>http://gaoryrt.com/2017/07-09-automatic/</guid>
      <pubDate>Sun, 09 Jul 2017 02:53:57 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;具体的事件可以看看&lt;a href=&quot;http://blog.jobbole.com/111742/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这一篇文章&lt;/a&gt;。&lt;br&gt;简单来说就是一个远程工作的员工，将一个月要做的事自动化到一个小时了。为了不让人发现
        
      
      </description>
      
      <content:encoded><![CDATA[<p>具体的事件可以看看<a href="http://blog.jobbole.com/111742/" target="_blank" rel="noopener">这一篇文章</a>。<br>简单来说就是一个远程工作的员工，将一个月要做的事自动化到一个小时了。为了不让人发现，程序还有故意出错的功能。由于工资高，自由时间多，他并没有把自动化的事情告诉他的老板。这样几乎没有劳动的拿了六个月工资后，他开始质疑自己的行为是否道德了。</p><p>人的代入感可能会很强，作为当事人肯定不愿意丢掉这个好工作，那么忍受自己良心的责备，可能会让他对自己进行辩护；作为他的同事或者是老板，可能就会质疑他拿这些钱的本事值不值得高薪和自由时间充裕了。我倒是这个事情要从两个方面看，一个是自动化，一个是不告诉老板。不要只看到人家不做事又拿高薪还闲的慌。</p><p>步入文明社会，就肯定会有机械来取代人工（解放生产力）。纺织工人、马车车夫、告诉公路收费人员、再到这个小哥。自动化是一件好事，<a href="https://www.zhihu.com/question/24138410" target="_blank" rel="noopener">大快人心的大好事</a>，把相对低复杂度的重复劳动给包装起来再放入<a href="https://www.zhihu.com/question/46747673" target="_blank" rel="noopener">透明的黑盒</a>。</p><p>可以这样说，如果设计得当的话，<strong>自动化就是富含经验的仙丹。</strong></p><p>现代人如果要掌握一门技术从头到尾的具体实现，那么花费的时间是以年来计算的。这句话说的时候离第一次工业革命才二百来年，这样想一想未来的某一天，如果有一个人想要掌握一门技术从头到尾的具体实现，那可能穷尽一生都不可能完成。</p><p>就比如2777年的宇宙飞船驾驶员面试题“<a href="http://ipn.li/kernelpanic/39/" target="_blank" rel="noopener">从按下发射按钮到飞船到达M78星云都具体发生了什么？</a>”，要完美回答这样的问题可能需要一个人花费一生来学习，这个时候生命的长度上限就限制了人类的进步了。必须要把经验给黑盒化，我不需要知道飞船是如何开动的，飞船设计的时候给了我足够多的按钮／接口，作为一个民用飞船驾驶员，我只需要会用就行了。</p><p>可能我永远不可能质疑自动化道不道德。毕竟人家是凭本事在搞自动化。</p><p>但是不告诉老板却是不道德的，作为老板肯定对他的行为有知情权，更别说这人写的自动化脚本居然还有自动加bug的功能（太棒了！），在我看来这可能就属于诈骗了，正如讨论中说到的：</p><blockquote><p>你还要让创建表格的分析师花费相当多的时间来检查你的工作</p></blockquote><p>这就不仅仅是自己的事，还连累到别人的工作（创造就业机会），这是万万不可的。</p><p>文明进步在某种程度上来说是懒惰推动的，而不是欺骗和隐瞒。</p><p>就是这样～</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/07-09-automatic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我想要什么</title>
      <link>http://gaoryrt.com/2017/05-05-whatiwanttoday/</link>
      <guid>http://gaoryrt.com/2017/05-05-whatiwanttoday/</guid>
      <pubDate>Thu, 04 May 2017 16:44:21 GMT</pubDate>
      <description>
      
        
        
          &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=31010857&amp;auto=1&amp;height=6
        
      
      </description>
      
      <content:encoded><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" src="//music.163.com/outchain/player?type=2&id=31010857&auto=1&height=66"></iframe><p>今天和大家说到这个话题的时候我还有点惊讶，自己居然没有一个准备好的答案。</p><p>如果突然问我，我应该会回答‘钱’，因为钱是通货。和电能一样，大多数能量都可以转化成电能；电能也可以转化为其他能量。</p><h2 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h2><p>思老师说他的梦想是当地铁导流员，他小时候羡慕地铁导流员每天上班能看到形形色色的人。</p><p>他现在的条件完全允许他无痛迁徙到地铁导流这份工作上，但是他并没有直接辞职，而是选择保留这个梦想，继续在我司工作。</p><p>我想可能思老师一辈子都不会去当地铁导流，这个梦在他这里就是个梦，而已。可能在拥有无痛迁徙的能力之后，这个梦想对他的吸引力就不如以前了。既然随时都可以辞职去完成自己的梦想，那还是不要改变，继续走。</p><p>私以为，实现梦想的道路并不是直达的：由于对自己的要求、对机遇的把控，很多人终其一生都不会圆梦。斯老师这种就属于超额完成了。让一个人，尤其是超额完成的这批人突然从一个轨道更换到另一个轨道是需要很大勇气的。</p><p>思老师自己说的，由于家庭的影响，他需要不会挨饿的安全感，所以才继续上班，而不是去当导流。我遇见很多人都是追求安稳的，现今的环境会引导人们去追求安稳。比如买房成家、比如小鸡长大了就变成了鹅；鹅长大了，就变成了羊；羊再长大了，就变成了牛；等牛长大了，共产主义就到了。</p><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h2><p>我同意说，成长的环境很大程度上决定了一个人的核心部分：这里指的既是三观，也是 ‘follow your heart’ 的 ‘heart’。这些核心部分在 ’people sure change’ 的过程中是很难改变的，很有可能会伴随这个人一生。那么是否应该在成长的环境中给人以尽量大的自由，将这个人的一生尽可能的交给他自己来决策呢？</p><p>我希望在我老的时候，不会因为自己没有做过某事、再也无法尝试而追悔。我可以锻炼我的心智，让我在那个时候不再在意没有做过的事，让我在那个时候不再追悔。当然也可以选择尽可能的做，将这些作为酒后的谈资。</p><p><img src="./whiplash.png" alt=""></p><p>所以说需要锻炼肉体和精神的强健呢，我想我已经对精神的强健有了一定的概念了。</p><p>睡觉了。要活着。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/05-05-whatiwanttoday/#disqus_thread</comments>
    </item>
    
    <item>
      <title>缺觉</title>
      <link>http://gaoryrt.com/2017/03-22-lackofsleep/</link>
      <guid>http://gaoryrt.com/2017/03-22-lackofsleep/</guid>
      <pubDate>Tue, 21 Mar 2017 18:48:54 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;自从这个月初租到房子，从学校搬出来之后，我的生活发生了翻天覆地的变化。&lt;br&gt;我希望我能勉强活下去，不至于流落街头。&lt;br&gt;为了达到这个目标，我要努力学习，增加自己的能力以及素质才是。&lt;br&gt;不能输啊。&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<p>自从这个月初租到房子，从学校搬出来之后，我的生活发生了翻天覆地的变化。<br>我希望我能勉强活下去，不至于流落街头。<br>为了达到这个目标，我要努力学习，增加自己的能力以及素质才是。<br>不能输啊。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/03-22-lackofsleep/#disqus_thread</comments>
    </item>
    
    <item>
      <title>荷尔蒙作品</title>
      <link>http://gaoryrt.com/2017/02-23-whatsup20170223/</link>
      <guid>http://gaoryrt.com/2017/02-23-whatsup20170223/</guid>
      <pubDate>Thu, 23 Feb 2017 14:22:05 GMT</pubDate>
      <description>
      
        
        
          &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
        
      
      </description>
      
      <content:encoded><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=17455810&auto=1&height=66"></iframe><h2 id="原则-基石-北极星"><a href="#原则-基石-北极星" class="headerlink" title="原则/基石/北极星"></a>原则/基石/北极星</h2><p>最近越发感觉原则的重要性，这里要说的更多是精神指标而非目的，比起导航来说更像北极星。<br>原则这东西就跟神奇海螺一样有问必答，在任何困惑的时候都可以往原则上靠以快速做出抉择。<br>以维基百科为例：</p><blockquote><p>维基百科的基础准则可以总结为五大支柱：<br>维基百科是一部百科全书<br>维基百科采用中立观点<br>维基百科是版权开放的<br>维基人以礼相待、相互尊重<br>维基百科不墨守成规</p></blockquote><p>这五点使维基百科与其他互联网百科区分开来，成为一个值得尊敬的整体。<br>然而这五点并不是在维基百科建立之后再总结出来的。要在刚开始的时候对整体精神有一个统筹，常人怕是很难做到。这也是为何计算机之父永远是计算机之父，你大爷终究是你大爷。<br>与做人的原则一样，这种原则应该是种一以贯之的东西。要在人生刚开始的时候就对整体精神有一个统筹，那么我想就真的是活出彩了。希望当我临终的时候回头望，也能发现自己一两点原则从未改变吧。</p><h2 id="我对知识付费的看法"><a href="#我对知识付费的看法" class="headerlink" title="我对知识付费的看法"></a>我对知识付费的看法</h2><p>小密圈，知乎Live，得到。互联网知识付费是有违互联网本质的，知识本应是共享的，然而在他们这儿免费用户和付费用户得到的东西确定了就不一样。<br>说白了就是吃相难看，太难看。内容优秀对我有价值我自然会支持。你想要钱可以，但是我不给你不能抢。<br>暴雪的游戏都有相应的付费模式，游戏中金钱可以节约时间，当然不花钱也要付出对应的时间。有没有付费不重要，努力的玩家与付费玩家并无本质差别。<br>但是互联网知识付费是否是关闭了努力者上升的道路？<br>我怕一种感觉自己得到了的错觉。付费让人感觉良好，自己为所谓的努力付出了金钱的代价，当然有部分人也仅止步于此。<br>这种错觉并不是完全有害，毕竟自信是某些人所渴望的，但是如果很多人都处于错觉带来的自信当中，那么进步就无从谈起了。<br>又想起我司组内选题会时与大家的分歧了，我当时希望的是给用户这种错觉，以达到赚钱的目的；大佬希望的是教书育人，顺便把钱赚了。<br>我想可能有很多用户，包括我自己都会吃这一套吧：为错觉付费。<br>现在想想，kindle 其实和这种东西有可能是同一种套路呢~</p><hr><p>好久没有写了，感觉很难憋出字来。。。<br>好好想，好好写。<br>点到为止。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/02-23-whatsup20170223/#disqus_thread</comments>
    </item>
    
    <item>
      <title>随笔一则</title>
      <link>http://gaoryrt.com/2017/01-15-whatsup20170115/</link>
      <guid>http://gaoryrt.com/2017/01-15-whatsup20170115/</guid>
      <pubDate>Sun, 15 Jan 2017 08:44:58 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今年的第一篇，那么新年的愿望就是这一篇不会是最后一篇。&lt;/p&gt;
&lt;h2 id=&quot;向。。。低头&quot;&gt;&lt;a href=&quot;#向。。。低头&quot; class=&quot;headerlink&quot; title=&quot;向。。。低头&quot;&gt;&lt;/a&gt;向。。。低头&lt;/h2&gt;&lt;p&gt;如果说最近学到了什么人生的经验，那么就
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今年的第一篇，那么新年的愿望就是这一篇不会是最后一篇。</p><h2 id="向。。。低头"><a href="#向。。。低头" class="headerlink" title="向。。。低头"></a>向。。。低头</h2><p>如果说最近学到了什么人生的经验，那么就是「我错了」。<br>我发现自己还是涉世未深，几乎对所有事物都是青勾子娃儿，常常犯错。<br>与写代码时检查自己一样，人际交往中，「我错了」可以发现问题，进而达到最终目的————解决问题。<br>即使羞于承认，但事实的的确确就是这样，自己总会出错的。</p><p>最近的对项目的提交很是频繁，几乎到了一种只要有 commit 就想交给后端上线的程度。<br>然而人员不像是编译器，出错了便提示你，他们除此之外总会有带有情绪。<br>一方面是频繁提交是一种重复劳动，所有程序员都不想做这样的事情。<br>另一方面是改动带来的不稳定因素预示着将来修改时的劳动时间，这是一种<strong>必然的未知</strong>，必然指必然发生，未知指未知工作量，人们不希望这样的东西干扰他们。</p><blockquote><p>提交代码时不仅提交了改动，起码还有一份对代码的尊重。</p></blockquote><p>以上是工作方面。</p><p>然后是人。<br>人总是会变的，据说离婚的首要原因是，妻子越发感觉婚后的丈夫失去野心。<br>People sure change，那么如何将我的下半生与一个会变的人分享，这个问题就十分有趣了，这也是一种<strong>必然的未知</strong>。<br>我想的话，解决方案应该是勇于承认自己的陈见，动态的评价吧。<br>至于动态评价的标准，就应该是经得起时间考验的、终极的奥义，例如「peace and love」。<br>所以我感觉我还是需要给所有事物一些机会，包括又不仅限于人、行为、作品、软件。<br>行动的第一步就是屏蔽的所有人，手边认为难看的书，等等。<br>或许这是给我将来重新安装网易云音乐一个借口？<br>————不知道这个梗的可以看<a href="http://gaoryrt.com/2016/08-22-shut-up-n-listen/">今天删了网易云音乐</a></p><h2 id="今天纹身了"><a href="#今天纹身了" class="headerlink" title="今天纹身了"></a>今天纹身了</h2><p>另，今天（2017年01月15日），我有了人生中的第一个纹身。<br>暂时不知道对我有什么影响，以后详说。这也是一种<strong>必然的未知</strong>。</p><h2 id="服务与创造"><a href="#服务与创造" class="headerlink" title="服务与创造"></a>服务与创造</h2><p>在某方面来说，服务处于创造的对立面。<br>大家觉得自己买的是服务，而非内容。写书就可以想写就写，爱看不看。但是到了餐厅就不是这样了。<br>毋庸置疑的，写书是创造，餐饮是服务。<br>对比二者发现：写书的需要做到不收流行影响，餐饮却要做到迎合流行。<br>写书的需要将「人」的因素加进去，而餐饮则需尽量将其排除。<br>另外，某些理发师认为自己是创造者，然而在使用方看来则是服务者，这可能也是为什么我们经常黑总监 Tony 了。</p><p>以上</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2017/01-15-whatsup20170115/#disqus_thread</comments>
    </item>
    
    <item>
      <title>What&#39;s Up These Days</title>
      <link>http://gaoryrt.com/2016/11-25-whatsup161125/</link>
      <guid>http://gaoryrt.com/2016/11-25-whatsup161125/</guid>
      <pubDate>Thu, 24 Nov 2016 16:04:41 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;The reason why this article is written in English is that I’m using vim which is not chinese-display friendly.&lt;/p&gt;
&lt;p&gt;The reason why I’m 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>The reason why this article is written in English is that I’m using vim which is not chinese-display friendly.</p><p>The reason why I’m using vim is that vim is my only choice in a ssh.</p><p>And ssh is the easiest way I can imagine to connect to my computer’s shell.</p><h2 id="so-what’s-up"><a href="#so-what’s-up" class="headerlink" title="so, what’s up?"></a>so, what’s up?</h2><p>Well, people change, things go wrong, shit happens but life goes on.<br>I’m still working out every one or two days. I like this full-body-controll thingy.<br>No more youtube channel, no more WestWorld. The latest episode is unwatched.<br>Today, i got a money support because of my personal open-source project, this guy likes it.<br>And today, I saw my colleague forwarding an advertisment of job offer in his Wechat moments, and this job offer discribed what should I do for work.<br>My poor English can not discribe how I feel.</p><h2 id="um…"><a href="#um…" class="headerlink" title="um…"></a>um…</h2><p>gather ye rosebuds while ye may<br>yesterday’s still a flying<br>and same flower that smils today<br>tomorrow will be dying</p><p>that’s all for these days</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2016/11-25-whatsup161125/#disqus_thread</comments>
    </item>
    
    <item>
      <title>好久没有听到抓耳朵的歌了</title>
      <link>http://gaoryrt.com/2016/11-13-glitch/</link>
      <guid>http://gaoryrt.com/2016/11-13-glitch/</guid>
      <pubDate>Sun, 13 Nov 2016 07:07:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;以下内容包含个人喜好，而且想到哪里写到哪里。想看的看，不想看就别看。&lt;/p&gt;
&lt;p&gt;前几天上班的时候突发奇想又把 &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Glitch_Mob&quot; target=&quot;_blank&quot; rel=&quot;noop
        
      
      </description>
      
      <content:encoded><![CDATA[<p>以下内容包含个人喜好，而且想到哪里写到哪里。想看的看，不想看就别看。</p><p>前几天上班的时候突发奇想又把 <a href="https://en.wikipedia.org/wiki/The_Glitch_Mob" target="_blank" rel="noopener">the glitch mob</a> 的歌翻出来听，第一次接触这个电子乐队还是当年看过一个 eva 的 MAD，BGM 用的 <a href="https://soundcloud.com/theglitchmob/drive-it-like-you-stole-it" target="_blank" rel="noopener">drive it like you stole it</a>，个人感觉视频剪辑搭配也近乎完美，有兴趣的可以看看，等会儿找到链接我给放最后。<br>另外他们还有一首比较出名的：</p><blockquote><p>Their remix for “Seven Nation Army” by The White Stripes was featured in the trailer for the World War I first-person shooter, Battlefield 1.</p></blockquote><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/10240918&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe><p>这首貌似很早之前就是拜仁的主场音乐了，好像我还在骑士主场听到过，对的就是 NBA 那个骑士。</p><p>最近喜欢下面这一首，可能是最近偏好 chill：</p><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/17958158&amp;color=ff5500&amp;auto_play=true&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe><p>上一次 the glitch mob 出新专辑我记得还是一年前的<a href="https://soundcloud.com/theglitchmob/sets/the-glitch-mob-love-death-immortality" target="_blank" rel="noopener">那张武士脑壳</a>吧。看名字没有一首影响深刻的，但是最近听来每一首都还挺熟悉的，可能这就是我说的<code>抓耳朵</code>不见了。不像是 <code>seven nation army</code> 或者是 <code>drive it like you stole it</code> 或者是 <code>we can make the world stop</code> 或者是 <code>monday</code> 或者是 <code>bad wings</code>。</p><p><img src="https://i.ytimg.com/vi/LBZ-3Ugj1AQ/maxresdefault.jpg" alt="Love Death Immortality"></p><p>感觉还是 <a href="https://soundcloud.com/theglitchmob/sets/drink-the-sea" target="_blank" rel="noopener">drink the sea</a> 这一张厉害得多，无论是原专辑，还是两张 remix。</p><p>又想起来 <a href="https://www.youtube.com/channel/UC8nidfOKkcgpO6tfc9OSdBQ" target="_blank" rel="noopener">OWSLA</a> 的 Rip N Dip，出了个歌还将将就就，非要搞个 MV 去捧 <a href="https://en.wikipedia.org/wiki/Vaporwave" target="_blank" rel="noopener">vaporwave</a> 的臭脚，视频放在下面，自己看。明明跟复古毛的关系都没有，非要搞点滤镜，加个 8 bit 的 game over 上去。实在不行放<a href="https://www.youtube.com/user/OWSLAofficial/videos" target="_blank" rel="noopener">反光的马在沙漠里转圈圈</a>也行啊，追个什么 retro 风？ 实话讲，OWSLA 的风格向来就奇葩，私以为花时间在探索上是好的，但是捧臭脚就是牛屎。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/2YllipGl2Is" frameborder="0" allowfullscreen></iframe><p>歌还是不错的，就是 mv 恶心，我到现在都能想到拍的时候几个人吃汉堡装作那样子多尴尬。</p><p>快了快了，十一月十八号 Justice 的 woman 就全出来了，到时候再看<del>你球电子乐有没有救</del> 。</p><p>另，drive it like you stole it 的 MAD：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/qpaC4QuVKMk" frameborder="0" allowfullscreen></iframe><p>真的厉害。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2016/11-13-glitch/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Emotion</title>
      <link>http://gaoryrt.com/2016/10-27-emotion/</link>
      <guid>http://gaoryrt.com/2016/10-27-emotion/</guid>
      <pubDate>Thu, 27 Oct 2016 14:02:40 GMT</pubDate>
      <description>
      
        
        
          &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;260&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=
        
      
      </description>
      
      <content:encoded><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="260" height="86" src="http://music.163.com/outchain/player?type=2&id=17455824&auto=1&height=66"></iframe><p>在大学的后两年，我渐渐不再掩盖自己的负面情绪了。在朋友面前毫无保留的展示自己的坏心思、表达对某个人的厌恶情感。我的内心总有个声音在给我说这是不对的，但是我的感觉却又告诉我这如此美妙。</p><p>我想把精美的事物毁坏给人看，想破坏某些优雅的东西。上一次有这种想法还是高三的时候，当时和最好的朋友下了晚自习，走到了少人的巷子里，我也悄悄向他说过类似的话。他当时给我的回复好像是，想什么就去做吧。然后我却没有去毁坏事物，这事现在让我庆幸又后悔，我在那个年纪并没有干出点那个年纪典型的事情来。我多么想在那个时候活得傻逼一点，现在我哪里有什么事情可以当做饭桌上的谈资呢？</p><p>我要是一个女生，我想我不会喜欢上现在的我这样的人的。可能是我也觉得自己太瘦了。我要努力长胖，等我一百四了之后我要去买一双aj，还要去纹身。纹 Don’t Panic，对就是 42 的那个 Don’t Panic。</p><p>我不想成为一个睡觉打呼噜，体重一百八的人，我不想成为一个休息时候玩线上游戏或看直播度日的人，我不想成为一个怠惰的人，办了健身卡又每天不去。别人做不到的东西，我想做给他看，我想拿出成果来好好打他的脸。我想我就是打心眼里不服，什么看不惯的都不服。</p><p>我又开始咬手了，不自觉的把指尖的角质给咬下来吐掉。我初中的时候也咬手，把每个手指都咬得坑坑洼洼，每次洗完澡泡涨了之后都特别有艺术气息，当时我妈还叫我买口香糖，后来查了查才知道是压力大导致的。或许是我想太多了，以至于周末也不能安心的睡到下午才起床。为什么每天我在闹钟响之前就会自然醒来？我想我的精神也许已经老了。想起姐姐以前还有口吃，这个可能和她左撇子用右手写字有关。</p><p>我想我是青春期到了，或许我就是发育晚一点，这也许也能解释为什么我当时没有典型的叛逆期了。我下巴的痘痘也能证明这一点。</p><blockquote><p>我也要想干什么就干什么，想不干什么就不干什么。<br>但是我是成年人了，要更努力才可以。</p></blockquote><p>以前随笔，现在随键盘。想看就看，不想看别看。</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2016/10-27-emotion/#disqus_thread</comments>
    </item>
    
    <item>
      <title>「译」CSS 3D 注意事项</title>
      <link>http://gaoryrt.com/2016/10-01-things-watch-working-css-3d/</link>
      <guid>http://gaoryrt.com/2016/10-01-things-watch-working-css-3d/</guid>
      <pubDate>Sat, 01 Oct 2016 14:39:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这一篇已经有人翻译过了：&lt;a href=&quot;http://www.w3cplus.com/css3/things-watch-working-css-3d.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS 3D 应该注意的事项&lt;/a&gt;&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<p>这一篇已经有人翻译过了：<a href="http://www.w3cplus.com/css3/things-watch-working-css-3d.html" target="_blank" rel="noopener">CSS 3D 应该注意的事项</a></p><p>原文链接：<a href="https://css-tricks.com/things-watch-working-css-3d/" target="_blank" rel="noopener">Things to Watch Out for When Working with CSS 3D</a> · 作者 <a href="https://css-tricks.com/author/thebabydino/" target="_blank" rel="noopener">ANA TUDOR</a></p><hr><p>我一直挺喜欢 3D 几何。在注意到 CSS 支持得越来越全面的同时，我也开始使用 CSS 3D 变换（transform）。但刚开始就有些东西难住了我：在创建多面体时，我自然地在 3D 中使用 transform 去创建 2D 图形并移动、旋转它们。我想我该记录下我遇见的奇特的部分，希望你能绕过这些障碍。</p><h2 id="3D-渲染上下文"><a href="#3D-渲染上下文" class="headerlink" title="3D 渲染上下文"></a>3D 渲染上下文</h2><p>还记得那晚好奇心驱使我写了一个小小的演示，想看看浏览器如何处理平面的交叉。这个演示包括了两个平面元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'plane'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'plane'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它们大小相同，用绝对定位放在屏幕的中间，为了看到它们又加了个背景：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dim</span>: <span class="number">40vmin</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.plane</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>; <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -.<span class="number">5</span>*<span class="variable">$dim</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$dim</span>; <span class="attribute">height</span>: <span class="variable">$dim</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ee8c25</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个场景就是整个<code>body</code>元素，让其覆盖整个视窗（viewport），然后给了一个<code>perspective（透视）</code>使得远一点的看起来小一点，近一点的显示的更大：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">40em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了测试平面相交的效果，第二个平面元素有一个<code>rotateY()</code>变换（transform），和一个不同的背景：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.plane</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(60deg);</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#d14730</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是令人失望的。似乎没有浏览器可以正确的处理平面相交：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="ozzWWp" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/ozzWWp/" target="_blank" rel="noopener">test plane intersection (WRONG!)</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>但是我错了。这些代码就应该显示成这个样子。我本应该将这两个平面放在同一个<a href="https://drafts.csswg.org/css-transforms/#3d-rendering-contexts" target="_blank" rel="noopener">3D 渲染上下文</a>中。鉴于有人不熟悉 3D 渲染上下文，简单来说它和<a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/" target="_blank" rel="noopener">堆叠上下文</a>差不多。在不同的堆叠上下文中我们不能通过<code>z-index</code>来对元素进行排序，同样的，在不同的 3D 渲染上下文中，3D 变换后的元素不能进行 3D 排序或交叉。</p><p>将元素放在同一个 3D 渲染上下文中的方法也很简单，即放在另一个元素内：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'assembly'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'plane'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'plane'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后把包裹元素用绝对定位放在场景中间，并为其设置<code>transform-style: preserve-3d</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: absolute; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.assembly</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>; <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了问题：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="ZppyYX" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/ZppyYX/" target="_blank" rel="noopener">test plane intersection (CORRECT)</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>由于浏览器的原因，你仍不能在 Firefox 中看到本应正常的平面相交效果。但是你应该能在 Webkit 和 Edge 浏览器中看到。</p><p>你有可能问了，为什么要还加一个包裹元素呢，在上一级元素（上面的例子中的<code>body</code>）里添加<code>transform-style: preserve-3d</code>不是更简单么？好吧，在上面的特例中你确实可以这么做（除了 Firefox，因为 Firefox 在处理 3D 顺序和交叉上有问题）：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="BLLkkK" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/BLLkkK/" target="_blank" rel="noopener">test plane intersection (working, BUT…)</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>但是在实际的工作环境中，场景不一定是<code>body</code>，我们也会为场景添加其他属性。这些其他属性则可能会干扰到展示效果。</p><h2 id="破坏-3D-（或造成扁平化）的情况"><a href="#破坏-3D-（或造成扁平化）的情况" class="headerlink" title="破坏 3D （或造成扁平化）的情况"></a>破坏 3D （或造成扁平化）的情况</h2><p>例子场景是页面中的另一个<code>div</code>，有其他元素环绕着它：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="NRRgrp" data-default-tab="html,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/NRRgrp/" target="_blank" rel="noopener">two planes in smaller scene #0</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>我为第二个平面添加了一些变换使其更加明显，但在这里它超出了场景。这并不是我想看到的。我希望我既能阅读文字，也能操作控件。</p><h3 id="1）overflow"><a href="#1）overflow" class="headerlink" title="1）overflow"></a>1）overflow</h3><p>我最先想到的就是在场景中使用<code>overflow: hidden</code>。然而在使用之后，它失去了漂亮的 3D 交叉效果：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="Zppyqj" data-default-tab="result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="https://codepen.io/thebabydino/pen/Zppyqj/" target="_blank" rel="noopener">two planes in smaller scene #2</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>这是因为给任意元素一个非<code>visible</code>的<code>overflow</code>属性都会强行将这个元素的<code>transform-style</code>设置为<code>flat</code>，即使它们已经被设置为了<code>preserve-3d</code>。所以我要使用元素来包裹他们，虽然多一点代码，却能少一点头疼。</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="KggqLo" data-default-tab="result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="https://codepen.io/thebabydino/pen/KggqLo/" target="_blank" rel="noopener">two planes in smaller scene #3</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>这就是为什么即使场景没有进行 3D 变换，我也总是将场景放在一个包裹的元素当中。比如下面的例子：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="LRkGkR" data-default-tab="result" data-user="thebabydino" data-embed-version="2" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/LRkGkR/" target="_blank" rel="noopener">blue hex helix candy (pure CSS 3D)</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>每一列旋转的六边形都被放在<code>.helix</code>元素当中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'helix'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'col'</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- all the hexagons inside a column --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the other columns --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.helix</code>设置的属性只有两个作用：</p><ol><li>保证整个部件被绝对定位于视窗中心 </li><li>所有列都被放在同一个 3D 渲染上下文中 </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.helix</span> &#123; <span class="attribute">top</span>: <span class="number">50%</span>; <span class="attribute">left</span>: <span class="number">50%</span>; &#125;</span><br></pre></td></tr></table></figure><p>这是因为我为场景（例子中的<code>body</code>）设置了<code>overflow: hidden</code>，同时六边形的大小也不由视窗决定，所以我不知道他们会不会向外延伸（产生我不想要的滚动条）。</p><p>我承认我被这个坑了很多次。在这里使用<code>overflow: hidden</code>让溢出的显示不那么明显。</p><p>要是一个元素设置了<code>transform-style: preserve-3d</code>，该属性就会<a href="https://davidwalsh.name/3d-transforms" target="_blank" rel="noopener">告诉浏览器</a>不应该把它（这个设置了<code>transform-style: preserve-3d</code>的元素）的子元素拍扁。所以在相同元素上设置<code>overflow: hidden</code>不会让 3D 元素在场景内被拍扁，也能防止子元素超出父元素平面，这在直觉上看也是合理的。</p><p>但有时一个 3D 变换的子元素还是会变成父元素中的平面。看看下面这个双面卡片的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'card'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'face'</span>&gt;</span>front<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'face'</span>&gt;</span>back<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里将其绝对居中于场景（例子中的<code>body</code>）里，给卡片和它的面设置相同的外观，为外部卡片设置<code>transform-style: preserve-3d</code>，为两面都设置<code>backface-visibility: hidden</code>，再将后面沿着纵轴转半圈：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dim</span>: <span class="number">40vmin</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$dim</span>; <span class="attribute">height</span>: <span class="variable">$dim</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>; <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -.<span class="number">5</span>*<span class="variable">$dim</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.face</span> &#123;</span><br><span class="line">    <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ee8c25</span>;</span><br><span class="line"></span><br><span class="line">    &amp;:last-child &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotateY(.<span class="number">5turn</span>);</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#d14730</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是demo：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="BLLdZO" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/BLLdZO/" target="_blank" rel="noopener">card #0</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>这两面都在父元素的平面内，而后面沿着纵轴旋转了半圈。背面虽然方向和正面相反，但是仍在同一个平面中。现在看来都挺好的。</p><p>假如我不想让面展现为长方形。最简单的方法就是为面设置<code>border-radius: 50%</code>。但是<a href="https://codepen.io/thebabydino/pen/ZppXbb/" target="_blank" rel="noopener">貌似完全没用</a>。</p><p>所以在卡片上设置<code>overflow: hidden</code>：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="kkkGPW" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/kkkGPW/" target="_blank" rel="noopener">card #2</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>但是这样破坏了我们的 3D 卡片。既然不能这样做，我们就在面上设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.face</span> &#123; <span class="attribute">border-radius</span>: <span class="number">50%</span>; &#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="light" data-slug-hash="YGpPXX" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/YGpPXX/" target="_blank" rel="noopener">card #3</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>在这个例子里，解决问题的方法比造成问题的还要简单。但是如果有另外一个形状，比如正八边形？一个正八边形通常用两个元素（或一个元素及其伪元素）来实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'octagon'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'inner'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给它们设置相同的外观，将<code>.inner</code>元素旋转<code>45deg</code>，为了能看得见，给他设置一个背景，然后为<code>.octagon</code>设置<code>overflow: hidden</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dim</span>: <span class="number">65vmin</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">width</span>: <span class="variable">$dim</span>; <span class="attribute">height</span>: <span class="variable">$dim</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.octagon</span> &#123; <span class="attribute">overflow</span>: hidden; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: rotate(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ee8c25</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果在下面：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="KgNwWZ" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/KgNwWZ/" target="_blank" rel="noopener">how to: basic regular octagon (pure CSS)</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>如果我们添点文字的话……</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'octagon'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'inner'</span>&gt;</span>octagon<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/thebabydino/pen/KgNwqB/" target="_blank" rel="noopener">就显示不出来了。</a></p><p>这是因为文字在边缘之外，所以我们将文字变大，用<code>text-align: center</code>让他水平居中，再将它的行高设置为<code>.octagon</code>（或<code>.inner</code>）元素的高度以垂直居中：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">10vmin</span>/ #&#123;<span class="variable">$dim</span>&#125; sans-serif;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在看上去就好多了，但是文字随着我们对<code>.inner</code>元素的旋转而旋转了：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="ozYgob" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/ozYgob/" target="_blank" rel="noopener">octagon with text #1</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>我们为<code>.octagon</code>元素也设置一个旋转（相同度数，相反方向，即负）来解决这个问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.octagon</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg); &#125;</span><br></pre></td></tr></table></figure><p>这样就是有文字的八边形了！</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="VKmYQj" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/VKmYQj/" target="_blank" rel="noopener">octagon with text - final!</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>现在来研究一下八边形的卡片。我们不能为卡片本身（卡片是<code>.octagon</code>元素，<code>.inner</code>元素就是面）设置<code>overflow: hidden</code>，这样会破坏 3D 卡片的两个不同面：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="qaqdpX" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/qaqdpX/" target="_blank" rel="noopener">card #4</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>所以要让<code>.octagon</code>作为面，然后用伪元素实现<code>.inner</code>元素：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.face</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">transform</span>: rotate(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line"></span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(-<span class="number">45deg</span>);</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#ee8c25</span>;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">'front'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;:last-child &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotateY(.<span class="number">5turn</span>) rotate(<span class="number">45deg</span>);</span><br><span class="line"></span><br><span class="line">        &amp;:before &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#d14730</span>;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">'back'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是就有了下面的结果：</p><p></p><p data-height="265" data-theme-id="light" data-slug-hash="ALpvgp" data-default-tab="css,result" data-user="thebabydino" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/thebabydino/pen/ALpvgp/" target="_blank" rel="noopener">card #5</a> by Ana Tudor (<a href="http://codepen.io/thebabydino" target="_blank" rel="noopener">@thebabydino</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><h3 id="2）clip-path"><a href="#2）clip-path" class="headerlink" title="2）clip-path"></a>2）clip-path</h3><p>另一个会造成相同问题的属性是<code>clip-path</code></p><h1 id="未完待续，话说有人已经翻译过了我的动力不强劲啊"><a href="#未完待续，话说有人已经翻译过了我的动力不强劲啊" class="headerlink" title="未完待续，话说有人已经翻译过了我的动力不强劲啊~~"></a>未完待续，话说有人已经翻译过了我的动力不强劲啊<del>~</del>~</h1>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2016/10-01-things-watch-working-css-3d/#disqus_thread</comments>
    </item>
    
    <item>
      <title>What I Learned Today</title>
      <link>http://gaoryrt.com/2016/09-23-what_i_learned_today/</link>
      <guid>http://gaoryrt.com/2016/09-23-what_i_learned_today/</guid>
      <pubDate>Fri, 23 Sep 2016 15:44:25 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;怎样正确使用-vue-resource-vuex&quot;&gt;&lt;a href=&quot;#怎样正确使用-vue-resource-vuex&quot; class=&quot;headerlink&quot; title=&quot;怎样正确使用 vue-resource + vuex&quot;&gt;&lt;/a&gt;怎样&lt;del&gt;正确&lt;/d
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="怎样正确使用-vue-resource-vuex"><a href="#怎样正确使用-vue-resource-vuex" class="headerlink" title="怎样正确使用 vue-resource + vuex"></a>怎样<del>正确</del>使用 vue-resource + vuex</h2><p>vue-resource 是一个用于XMLHttpRequest以及JSON操作的插件，其实如果不是对<code>inteceptor</code>有需求，有jQuery就够了。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actions.js</span></span><br><span class="line"><span class="comment">// 父组件调用这个action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getData = <span class="function">(<span class="params">&#123; dispatch &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    Vue.http.get(url, &#123; req: <span class="string">'req body'</span> &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 正常返回, 别忘了处理错误</span></span><br><span class="line">        dispatch(REFRESH_DATA, res.data)</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        alert(err.message)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ........</span></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    data: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    [REFRESH_DATA] (state, data) &#123;</span><br><span class="line">        state.data = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 各个需要更新数据的子控件.vue</span></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    vuex: &#123;</span><br><span class="line">        getters: &#123;</span><br><span class="line">            data: <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure></p><p><a href="http://www.doc00.com/doc/1001004eg" target="_blank" rel="noopener">详情看这里</a></p><h2 id="记得把-externals-写在-webpack-config-js-里面啊"><a href="#记得把-externals-写在-webpack-config-js-里面啊" class="headerlink" title="记得把 externals 写在 webpack.config.js 里面啊"></a>记得把 externals 写在 webpack.config.js 里面啊</h2><p>傻乎乎的在<code>index.html</code>中单独引入了cdn的jquery，忘了往webpack里面配置。结果打包出来一百多kb，是说那么慢。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">externals:</span> &#123;</span><br><span class="line"><span class="string">'jquery'</span>: <span class="string">'jQuery'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再打包就只有三十多kb了，而且这里面还包括<code>vue-touch</code>的<code>hammer.js</code>，这个不知道怎么单独写出来了，等下去问问。</p><h2 id="在android-ios中使用vue"><a href="#在android-ios中使用vue" class="headerlink" title="在android/ios中使用vue"></a>在android/ios中使用vue</h2><p>aka 暴露全局变量给webview回调<br>改了几个版本，还有个<a href="https://github.com/webpack/docs/wiki/shimming-modules" target="_blank" rel="noopener">shim挂载至全局的办法</a>，我还没有看。</p><p>下面是直接暴露的方法<br>在exposed.vue中：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">var ex</span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml">export default </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">methods: &#123;</span></span><br><span class="line"><span class="template-variable">setSth(tag, score) &#123;</span></span><br><span class="line"><span class="template-variable">this.list[tag] = score</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">ready() </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">ex = this</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">exoport </span><span class="template-variable">&#123; ex &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>然后在顶层 main.js 中：// 注意这里并不是window，我在这里卡了一会儿还。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> exposed <span class="keyword">from</span> <span class="string">'path_to/exposed.vue'</span> <span class="comment">// 暴露ex</span></span><br><span class="line"><span class="keyword">import</span> default <span class="keyword">from</span> <span class="string">'path_to/exposed.vue'</span> <span class="comment">// 暴露setSth()</span></span><br><span class="line">...</span><br><span class="line">exposed = ex <span class="comment">// 绑定至事先定义好的全局变量</span></span><br></pre></td></tr></table></figure></p><p>全局下面，index.html:<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    var exposed = </span><span class="template-variable">&#123;&#125;</span><span class="xml"> // 在build.js之前定义一个全局变量</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">// 使用</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    exposed.methods.setSth(0, 1)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="使用vuex"><a href="#使用vuex" class="headerlink" title="使用vuex"></a>使用vuex</h2><p>没有vuex的时候使用<code>$dispatch()</code>和<code>$broadcast()</code>。<br>有vuex的时候dispatch：<br>action.vue<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store from <span class="string">'store.js'</span></span><br><span class="line">exports <span class="keyword">default</span> &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">act(info) &#123;</span><br><span class="line">store.dispatch(<span class="string">'action'</span>, info)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>store.js:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Vuex <span class="keyword">from</span> 'vuex'</span><br><span class="line">const <span class="keyword">state</span> = &#123;</span><br><span class="line">a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">const mutations = &#123;</span><br><span class="line">action(<span class="keyword">state</span>, info) &#123;</span><br><span class="line"><span class="keyword">state</span>.a = <span class="number">0</span></span><br><span class="line">console.<span class="keyword">log</span>(info)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> new Vuex.Store(&#123;</span><br><span class="line"><span class="keyword">state</span>,</span><br><span class="line">mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>有vuex的时候broadcast：<br>action.vue<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store from <span class="string">'store.js'</span></span><br><span class="line">exports <span class="keyword">default</span> &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">do() &#123;console.log(<span class="string">'done'</span>)&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line"><span class="string">'store.state.a'</span>: <span class="string">'do'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>store.js:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vuex <span class="keyword">from</span> 'vuex'</span><br><span class="line">const <span class="keyword">state</span> = &#123;</span><br><span class="line">a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">const mutations = &#123;&#125;</span><br><span class="line">export <span class="keyword">default</span> new Vuex.Store(&#123;</span><br><span class="line"><span class="keyword">state</span>,</span><br><span class="line">mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="name">function</span>() &#123;</span><br><span class="line">  animation.translate(<span class="number">30</span>).step()</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    animationData<span class="symbol">:animation</span>.export()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;.bind(<span class="name">this</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>在es5中就可以使用<code>.bind(this)</code>了</p><h2 id="再也不用css-filter了"><a href="#再也不用css-filter了" class="headerlink" title="再也不用css:filter了"></a>再也不用css:filter了</h2><p>在安卓上就跟屎一样</p><h2 id="proxychains-ng"><a href="#proxychains-ng" class="headerlink" title="proxychains-ng"></a>proxychains-ng</h2><p>proxychains 是给命令行使用代理的工具，支持 socks5.</p><p><code>$ brew install proxychains-ng</code></p><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><p>打开的时候不要开代理，不然有<code>net::ERR_NAME_NOT_RESOLVED</code>问题<br>wxml 要用 <code>&lt;image&gt;&lt;/image&gt;</code>标签而不是<code>&lt;img&gt;&lt;/img&gt;</code><br>wxss 不支持<code>transform</code>，不支持<code>animation</code>的<code>@keyframes</code>，反而使用<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-animation.html" target="_blank" rel="noopener">wx.createAnimation(OBJECT)</a>，自己的api，这个好处在哪里？<br>（待确定）wxss <code>background-size</code> 的渲染有问题？</p><h2 id="git-push-每次都要输入密码？"><a href="#git-push-每次都要输入密码？" class="headerlink" title="git push 每次都要输入密码？"></a>git push 每次都要输入密码？</h2><p><code>git remote -v</code><br>看到<code>fetch</code>和<code>push</code>的开头都是<code>https</code><br>没有走<code>ssh</code>，要先加上<code>ssh-key</code>，再换成<code>ssh</code>的方式<br>记得先在github的sshkey设置里面加上本机的sshkey<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@github<span class="selector-class">.com</span>:mugbya/arch_config.git</span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure></p><h2 id="伪元素和伪类"><a href="#伪元素和伪类" class="headerlink" title="伪元素和伪类"></a>伪元素和伪类</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">span</span>&gt;</span>字符看看会不会变红？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一个字符是红色，因为<code>::first-letter</code>伪元素是作为子元素存在的。</p><h2 id="放假是用新东西的时候"><a href="#放假是用新东西的时候" class="headerlink" title="放假是用新东西的时候"></a>放假是用新东西的时候</h2><p>新鞋子，新衣服</p><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p><code>command</code> + <code>option</code> + <code>esc</code></p><h2 id="js小数点保留2位"><a href="#js小数点保留2位" class="headerlink" title="js小数点保留2位"></a>js小数点保留2位</h2><p>num.toFixed(2)</p><h2 id="数据异步更新的问题"><a href="#数据异步更新的问题" class="headerlink" title="数据异步更新的问题"></a>数据异步更新的问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'html'</span>).css(<span class="string">'font-size'</span>, <span class="string">'1.29em'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    $(<span class="string">'html'</span>).css(<span class="string">'font-size'</span>, <span class="string">'1.3em'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="css性能"><a href="#css性能" class="headerlink" title="css性能"></a>css性能</h2><p>will-change: transform;<br>使用3d变换</p>]]></content:encoded>
      
      <comments>http://gaoryrt.com/2016/09-23-what_i_learned_today/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
